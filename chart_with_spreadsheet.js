//two methods to perform a URL based data entry -GID and sheet
google.charts.load('current', {'packages':['corechart']});

// Set a callback to run when the Google Visualization API is loaded.
google.charts.setOnLoadCallback(initialize);    //we pass the same fn here.
function initialize() {
  var opts = {sendMethod: 'auto'};
  // Replace the data source URL on next line with your data source URL.
  //query will be generated by spreadsheet
  var query = new google.visualization.Query('https://docs.google.com/spreadsheets/d/1xyD00Ey4YiVEVvJFiW7gzhgmZs1TdKbGKTaCbRC_i3g/edit#gid=0', opts);

  // request the spread sheet for what we are requeting
  query.setQuery('select A, sum(B) group by A');

   // tnis is---select%20C%2C%20sum(B)%20group%20by%20C

  // Send the query with a callback function.
  query.send(handleQueryResponse);
}

function handleQueryResponse(response) {
  // Called when the query response is returned.
  if (response.isError()) {
    alert('Error in query: ' + response.getMessage() + ' ' + response.getDetailedMessage());
    return;
  }

  var data = response.getDataTable();
  var chart = new google.visualization.ColumnChart(document.getElementById('chart_div'));
  chart.draw(data, { height: 400 });
}
//few other req we can make from spreadsheets

// select	Selects which columns to return, and in what order. If omitted, all of the table's columns are returned, in their default order.
// where	Returns only rows that match a condition. If omitted, all rows are returned.
// group by	Aggregates values across rows.
// pivot	Transforms distinct values in columns into new columns.
// order by	Sorts rows by values in columns.
// limit	Limits the number of returned rows.
// offset	Skips a given number of first rows.
// label	Sets column labels.
// format	Formats the values in certain columns using given formatting patterns.
// options	Sets additional options.
